buildscript {
  ext {
    sonarVersion = "2.7.1"
    spotlessVersion= "3.25.0"
    junit5Version = "5.6.2"
    guiceVersion = "4.2.3"
    jaxbVersion = "2.3.1"
  }
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    jcenter()
  }
  dependencies { classpath "com.diffplug.spotless:spotless-plugin-gradle:${spotlessVersion}" }
}

plugins {
  id "org.sonarqube" version "2.8"
  id "jacoco" 
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "com.diffplug.gradle.spotless"

repositories {
  mavenCentral()
  jcenter()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
    example {
        java {
            srcDirs 'src/example/java'
        }
        resources {
            srcDirs 'src/example/resources'
        }
    }
 }
 
archivesBaseName = "ai.saxatus.aiml"
version = "1.0.0"
 
sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    
  implementation "org.apache.commons:commons-lang3:3.1"
  implementation "commons-logging:commons-logging:1.2"
  implementation "org.reflections:reflections:0.9.10"
  implementation "com.google.inject:guice:${guiceVersion}"
  implementation "com.google.inject.extensions:guice-assistedinject:${guiceVersion}"
  implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"
  runtimeOnly "org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}"
  
  testImplementation "org.mockito:mockito-core:2.7.22"
  testImplementation "org.jacoco:org.jacoco.agent:0.7+"
  testImplementation "org.jacoco:org.jacoco.ant:0.7+"
  testImplementation "org.jacoco:org.jacoco.core:0.7+"
  testImplementation "org.jacoco:org.jacoco.report:0.7+"
  testImplementation "org.mockito:mockito-core:2.+"
  // JUnit 5
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
}

spotless {
  enforceCheck = false	
    java {  
      target project.fileTree(projectDir) { include "**/*.java" }
      eclipse().configFile new File("${projectDir}/CodeStyle.xml")
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport // report is always generated after tests run
}



sonarqube {
  properties {
    property "sonar.projectName", "ai.saxatus.aiml"
    property "sonar.organization", "sgla-bitbucket"
    property "sonar.projectKey", "sgla_aiml-core"
    property "sonar.core.codeCoveragePlugin", "jacoco"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}
